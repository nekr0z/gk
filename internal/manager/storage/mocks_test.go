// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package storage

import (
	"context"

	"github.com/nekr0z/gk/internal/manager/crypt"
	mock "github.com/stretchr/testify/mock"
)

// NewMockStorage creates a new instance of MockStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorage {
	mock := &MockStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockStorage is an autogenerated mock type for the Storage type
type MockStorage struct {
	mock.Mock
}

type MockStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorage) EXPECT() *MockStorage_Expecter {
	return &MockStorage_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type MockStorage
func (_mock *MockStorage) Delete(context1 context.Context, s string) error {
	ret := _mock.Called(context1, s)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(context1, s)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockStorage_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - context1 context.Context
//   - s string
func (_e *MockStorage_Expecter) Delete(context1 interface{}, s interface{}) *MockStorage_Delete_Call {
	return &MockStorage_Delete_Call{Call: _e.mock.On("Delete", context1, s)}
}

func (_c *MockStorage_Delete_Call) Run(run func(context1 context.Context, s string)) *MockStorage_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorage_Delete_Call) Return(err error) *MockStorage_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_Delete_Call) RunAndReturn(run func(context1 context.Context, s string) error) *MockStorage_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockStorage
func (_mock *MockStorage) Get(context1 context.Context, s string) (StoredSecret, error) {
	ret := _mock.Called(context1, s)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 StoredSecret
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (StoredSecret, error)); ok {
		return returnFunc(context1, s)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) StoredSecret); ok {
		r0 = returnFunc(context1, s)
	} else {
		r0 = ret.Get(0).(StoredSecret)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(context1, s)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockStorage_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - context1 context.Context
//   - s string
func (_e *MockStorage_Expecter) Get(context1 interface{}, s interface{}) *MockStorage_Get_Call {
	return &MockStorage_Get_Call{Call: _e.mock.On("Get", context1, s)}
}

func (_c *MockStorage_Get_Call) Run(run func(context1 context.Context, s string)) *MockStorage_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorage_Get_Call) Return(storedSecret StoredSecret, err error) *MockStorage_Get_Call {
	_c.Call.Return(storedSecret, err)
	return _c
}

func (_c *MockStorage_Get_Call) RunAndReturn(run func(context1 context.Context, s string) (StoredSecret, error)) *MockStorage_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockStorage
func (_mock *MockStorage) List(context1 context.Context) (map[string]ListedSecret, error) {
	ret := _mock.Called(context1)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 map[string]ListedSecret
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (map[string]ListedSecret, error)); ok {
		return returnFunc(context1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) map[string]ListedSecret); ok {
		r0 = returnFunc(context1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]ListedSecret)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(context1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockStorage_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - context1 context.Context
func (_e *MockStorage_Expecter) List(context1 interface{}) *MockStorage_List_Call {
	return &MockStorage_List_Call{Call: _e.mock.On("List", context1)}
}

func (_c *MockStorage_List_Call) Run(run func(context1 context.Context)) *MockStorage_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockStorage_List_Call) Return(stringToListedSecret map[string]ListedSecret, err error) *MockStorage_List_Call {
	_c.Call.Return(stringToListedSecret, err)
	return _c
}

func (_c *MockStorage_List_Call) RunAndReturn(run func(context1 context.Context) (map[string]ListedSecret, error)) *MockStorage_List_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function for the type MockStorage
func (_mock *MockStorage) Put(context1 context.Context, s string, storedSecret StoredSecret) error {
	ret := _mock.Called(context1, s, storedSecret)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, StoredSecret) error); ok {
		r0 = returnFunc(context1, s, storedSecret)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type MockStorage_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - context1 context.Context
//   - s string
//   - storedSecret StoredSecret
func (_e *MockStorage_Expecter) Put(context1 interface{}, s interface{}, storedSecret interface{}) *MockStorage_Put_Call {
	return &MockStorage_Put_Call{Call: _e.mock.On("Put", context1, s, storedSecret)}
}

func (_c *MockStorage_Put_Call) Run(run func(context1 context.Context, s string, storedSecret StoredSecret)) *MockStorage_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 StoredSecret
		if args[2] != nil {
			arg2 = args[2].(StoredSecret)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockStorage_Put_Call) Return(err error) *MockStorage_Put_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_Put_Call) RunAndReturn(run func(context1 context.Context, s string, storedSecret StoredSecret) error) *MockStorage_Put_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRemote creates a new instance of MockRemote. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRemote(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRemote {
	mock := &MockRemote{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRemote is an autogenerated mock type for the Remote type
type MockRemote struct {
	mock.Mock
}

type MockRemote_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRemote) EXPECT() *MockRemote_Expecter {
	return &MockRemote_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type MockRemote
func (_mock *MockRemote) Delete(ctx context.Context, key string, hash [32]byte) error {
	ret := _mock.Called(ctx, key, hash)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, [32]byte) error); ok {
		r0 = returnFunc(ctx, key, hash)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRemote_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockRemote_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - hash [32]byte
func (_e *MockRemote_Expecter) Delete(ctx interface{}, key interface{}, hash interface{}) *MockRemote_Delete_Call {
	return &MockRemote_Delete_Call{Call: _e.mock.On("Delete", ctx, key, hash)}
}

func (_c *MockRemote_Delete_Call) Run(run func(ctx context.Context, key string, hash [32]byte)) *MockRemote_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 [32]byte
		if args[2] != nil {
			arg2 = args[2].([32]byte)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRemote_Delete_Call) Return(err error) *MockRemote_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRemote_Delete_Call) RunAndReturn(run func(ctx context.Context, key string, hash [32]byte) error) *MockRemote_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockRemote
func (_mock *MockRemote) Get(ctx context.Context, key string) (crypt.Data, error) {
	ret := _mock.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 crypt.Data
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (crypt.Data, error)); ok {
		return returnFunc(ctx, key)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) crypt.Data); ok {
		r0 = returnFunc(ctx, key)
	} else {
		r0 = ret.Get(0).(crypt.Data)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRemote_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockRemote_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockRemote_Expecter) Get(ctx interface{}, key interface{}) *MockRemote_Get_Call {
	return &MockRemote_Get_Call{Call: _e.mock.On("Get", ctx, key)}
}

func (_c *MockRemote_Get_Call) Run(run func(ctx context.Context, key string)) *MockRemote_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRemote_Get_Call) Return(data crypt.Data, err error) *MockRemote_Get_Call {
	_c.Call.Return(data, err)
	return _c
}

func (_c *MockRemote_Get_Call) RunAndReturn(run func(ctx context.Context, key string) (crypt.Data, error)) *MockRemote_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockRemote
func (_mock *MockRemote) List(ctx context.Context) ([]RemoteListedSecret, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []RemoteListedSecret
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]RemoteListedSecret, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []RemoteListedSecret); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]RemoteListedSecret)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRemote_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockRemote_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRemote_Expecter) List(ctx interface{}) *MockRemote_List_Call {
	return &MockRemote_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *MockRemote_List_Call) Run(run func(ctx context.Context)) *MockRemote_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRemote_List_Call) Return(remoteListedSecrets []RemoteListedSecret, err error) *MockRemote_List_Call {
	_c.Call.Return(remoteListedSecrets, err)
	return _c
}

func (_c *MockRemote_List_Call) RunAndReturn(run func(ctx context.Context) ([]RemoteListedSecret, error)) *MockRemote_List_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function for the type MockRemote
func (_mock *MockRemote) Put(ctx context.Context, key string, data crypt.Data, hash [32]byte) error {
	ret := _mock.Called(ctx, key, data, hash)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, crypt.Data, [32]byte) error); ok {
		r0 = returnFunc(ctx, key, data, hash)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRemote_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type MockRemote_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - data crypt.Data
//   - hash [32]byte
func (_e *MockRemote_Expecter) Put(ctx interface{}, key interface{}, data interface{}, hash interface{}) *MockRemote_Put_Call {
	return &MockRemote_Put_Call{Call: _e.mock.On("Put", ctx, key, data, hash)}
}

func (_c *MockRemote_Put_Call) Run(run func(ctx context.Context, key string, data crypt.Data, hash [32]byte)) *MockRemote_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 crypt.Data
		if args[2] != nil {
			arg2 = args[2].(crypt.Data)
		}
		var arg3 [32]byte
		if args[3] != nil {
			arg3 = args[3].([32]byte)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockRemote_Put_Call) Return(err error) *MockRemote_Put_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRemote_Put_Call) RunAndReturn(run func(ctx context.Context, key string, data crypt.Data, hash [32]byte) error) *MockRemote_Put_Call {
	_c.Call.Return(run)
	return _c
}
