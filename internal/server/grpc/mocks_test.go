// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package grpc

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockUserService creates a new instance of MockUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserService {
	mock := &MockUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserService is an autogenerated mock type for the UserService type
type MockUserService struct {
	mock.Mock
}

type MockUserService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserService) EXPECT() *MockUserService_Expecter {
	return &MockUserService_Expecter{mock: &_m.Mock}
}

// CreateToken provides a mock function for the type MockUserService
func (_mock *MockUserService) CreateToken(ctx context.Context, username string, password string) (string, error) {
	ret := _mock.Called(ctx, username, password)

	if len(ret) == 0 {
		panic("no return value specified for CreateToken")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return returnFunc(ctx, username, password)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = returnFunc(ctx, username, password)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, username, password)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_CreateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateToken'
type MockUserService_CreateToken_Call struct {
	*mock.Call
}

// CreateToken is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - password string
func (_e *MockUserService_Expecter) CreateToken(ctx interface{}, username interface{}, password interface{}) *MockUserService_CreateToken_Call {
	return &MockUserService_CreateToken_Call{Call: _e.mock.On("CreateToken", ctx, username, password)}
}

func (_c *MockUserService_CreateToken_Call) Run(run func(ctx context.Context, username string, password string)) *MockUserService_CreateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockUserService_CreateToken_Call) Return(s string, err error) *MockUserService_CreateToken_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockUserService_CreateToken_Call) RunAndReturn(run func(ctx context.Context, username string, password string) (string, error)) *MockUserService_CreateToken_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function for the type MockUserService
func (_mock *MockUserService) Register(ctx context.Context, username string, password string) error {
	ret := _mock.Called(ctx, username, password)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, username, password)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserService_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockUserService_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - password string
func (_e *MockUserService_Expecter) Register(ctx interface{}, username interface{}, password interface{}) *MockUserService_Register_Call {
	return &MockUserService_Register_Call{Call: _e.mock.On("Register", ctx, username, password)}
}

func (_c *MockUserService_Register_Call) Run(run func(ctx context.Context, username string, password string)) *MockUserService_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockUserService_Register_Call) Return(err error) *MockUserService_Register_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserService_Register_Call) RunAndReturn(run func(ctx context.Context, username string, password string) error) *MockUserService_Register_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyToken provides a mock function for the type MockUserService
func (_mock *MockUserService) VerifyToken(ctx context.Context, token string) (string, error) {
	ret := _mock.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for VerifyToken")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return returnFunc(ctx, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = returnFunc(ctx, token)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_VerifyToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyToken'
type MockUserService_VerifyToken_Call struct {
	*mock.Call
}

// VerifyToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockUserService_Expecter) VerifyToken(ctx interface{}, token interface{}) *MockUserService_VerifyToken_Call {
	return &MockUserService_VerifyToken_Call{Call: _e.mock.On("VerifyToken", ctx, token)}
}

func (_c *MockUserService_VerifyToken_Call) Run(run func(ctx context.Context, token string)) *MockUserService_VerifyToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserService_VerifyToken_Call) Return(s string, err error) *MockUserService_VerifyToken_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockUserService_VerifyToken_Call) RunAndReturn(run func(ctx context.Context, token string) (string, error)) *MockUserService_VerifyToken_Call {
	_c.Call.Return(run)
	return _c
}
