// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package secret

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockSecretStorage creates a new instance of MockSecretStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSecretStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSecretStorage {
	mock := &MockSecretStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSecretStorage is an autogenerated mock type for the SecretStorage type
type MockSecretStorage struct {
	mock.Mock
}

type MockSecretStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSecretStorage) EXPECT() *MockSecretStorage_Expecter {
	return &MockSecretStorage_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type MockSecretStorage
func (_mock *MockSecretStorage) Delete(ctx context.Context, username string, key string, hash [32]byte) error {
	ret := _mock.Called(ctx, username, key, hash)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, [32]byte) error); ok {
		r0 = returnFunc(ctx, username, key, hash)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSecretStorage_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockSecretStorage_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - key string
//   - hash [32]byte
func (_e *MockSecretStorage_Expecter) Delete(ctx interface{}, username interface{}, key interface{}, hash interface{}) *MockSecretStorage_Delete_Call {
	return &MockSecretStorage_Delete_Call{Call: _e.mock.On("Delete", ctx, username, key, hash)}
}

func (_c *MockSecretStorage_Delete_Call) Run(run func(ctx context.Context, username string, key string, hash [32]byte)) *MockSecretStorage_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 [32]byte
		if args[3] != nil {
			arg3 = args[3].([32]byte)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockSecretStorage_Delete_Call) Return(err error) *MockSecretStorage_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSecretStorage_Delete_Call) RunAndReturn(run func(ctx context.Context, username string, key string, hash [32]byte) error) *MockSecretStorage_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockSecretStorage
func (_mock *MockSecretStorage) Get(ctx context.Context, username string, key string) (Secret, error) {
	ret := _mock.Called(ctx, username, key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 Secret
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (Secret, error)); ok {
		return returnFunc(ctx, username, key)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) Secret); ok {
		r0 = returnFunc(ctx, username, key)
	} else {
		r0 = ret.Get(0).(Secret)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, username, key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSecretStorage_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockSecretStorage_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - key string
func (_e *MockSecretStorage_Expecter) Get(ctx interface{}, username interface{}, key interface{}) *MockSecretStorage_Get_Call {
	return &MockSecretStorage_Get_Call{Call: _e.mock.On("Get", ctx, username, key)}
}

func (_c *MockSecretStorage_Get_Call) Run(run func(ctx context.Context, username string, key string)) *MockSecretStorage_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockSecretStorage_Get_Call) Return(secret Secret, err error) *MockSecretStorage_Get_Call {
	_c.Call.Return(secret, err)
	return _c
}

func (_c *MockSecretStorage_Get_Call) RunAndReturn(run func(ctx context.Context, username string, key string) (Secret, error)) *MockSecretStorage_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockSecretStorage
func (_mock *MockSecretStorage) List(ctx context.Context, username string) ([]Secret, error) {
	ret := _mock.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []Secret
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]Secret, error)); ok {
		return returnFunc(ctx, username)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []Secret); ok {
		r0 = returnFunc(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Secret)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, username)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSecretStorage_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockSecretStorage_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MockSecretStorage_Expecter) List(ctx interface{}, username interface{}) *MockSecretStorage_List_Call {
	return &MockSecretStorage_List_Call{Call: _e.mock.On("List", ctx, username)}
}

func (_c *MockSecretStorage_List_Call) Run(run func(ctx context.Context, username string)) *MockSecretStorage_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSecretStorage_List_Call) Return(secrets []Secret, err error) *MockSecretStorage_List_Call {
	_c.Call.Return(secrets, err)
	return _c
}

func (_c *MockSecretStorage_List_Call) RunAndReturn(run func(ctx context.Context, username string) ([]Secret, error)) *MockSecretStorage_List_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function for the type MockSecretStorage
func (_mock *MockSecretStorage) Put(ctx context.Context, username string, secret Secret, hash [32]byte) error {
	ret := _mock.Called(ctx, username, secret, hash)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, Secret, [32]byte) error); ok {
		r0 = returnFunc(ctx, username, secret, hash)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSecretStorage_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type MockSecretStorage_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - secret Secret
//   - hash [32]byte
func (_e *MockSecretStorage_Expecter) Put(ctx interface{}, username interface{}, secret interface{}, hash interface{}) *MockSecretStorage_Put_Call {
	return &MockSecretStorage_Put_Call{Call: _e.mock.On("Put", ctx, username, secret, hash)}
}

func (_c *MockSecretStorage_Put_Call) Run(run func(ctx context.Context, username string, secret Secret, hash [32]byte)) *MockSecretStorage_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 Secret
		if args[2] != nil {
			arg2 = args[2].(Secret)
		}
		var arg3 [32]byte
		if args[3] != nil {
			arg3 = args[3].([32]byte)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockSecretStorage_Put_Call) Return(err error) *MockSecretStorage_Put_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSecretStorage_Put_Call) RunAndReturn(run func(ctx context.Context, username string, secret Secret, hash [32]byte) error) *MockSecretStorage_Put_Call {
	_c.Call.Return(run)
	return _c
}
