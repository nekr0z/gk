// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package pb

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/types/known/emptypb"
)

// NewMockUserServiceClient creates a new instance of MockUserServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserServiceClient {
	mock := &MockUserServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserServiceClient is an autogenerated mock type for the UserServiceClient type
type MockUserServiceClient struct {
	mock.Mock
}

type MockUserServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserServiceClient) EXPECT() *MockUserServiceClient_Expecter {
	return &MockUserServiceClient_Expecter{mock: &_m.Mock}
}

// Login provides a mock function for the type MockUserServiceClient
func (_mock *MockUserServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *LoginResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *LoginRequest, ...grpc.CallOption) (*LoginResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *LoginRequest, ...grpc.CallOption) *LoginResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*LoginResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *LoginRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserServiceClient_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockUserServiceClient_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - in *LoginRequest
//   - opts ...grpc.CallOption
func (_e *MockUserServiceClient_Expecter) Login(ctx interface{}, in interface{}, opts ...interface{}) *MockUserServiceClient_Login_Call {
	return &MockUserServiceClient_Login_Call{Call: _e.mock.On("Login",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockUserServiceClient_Login_Call) Run(run func(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption)) *MockUserServiceClient_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *LoginRequest
		if args[1] != nil {
			arg1 = args[1].(*LoginRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockUserServiceClient_Login_Call) Return(loginResponse *LoginResponse, err error) *MockUserServiceClient_Login_Call {
	_c.Call.Return(loginResponse, err)
	return _c
}

func (_c *MockUserServiceClient_Login_Call) RunAndReturn(run func(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)) *MockUserServiceClient_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Signup provides a mock function for the type MockUserServiceClient
func (_mock *MockUserServiceClient) Signup(ctx context.Context, in *SignupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Signup")
	}

	var r0 *emptypb.Empty
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *SignupRequest, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *SignupRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *SignupRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserServiceClient_Signup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Signup'
type MockUserServiceClient_Signup_Call struct {
	*mock.Call
}

// Signup is a helper method to define mock.On call
//   - ctx context.Context
//   - in *SignupRequest
//   - opts ...grpc.CallOption
func (_e *MockUserServiceClient_Expecter) Signup(ctx interface{}, in interface{}, opts ...interface{}) *MockUserServiceClient_Signup_Call {
	return &MockUserServiceClient_Signup_Call{Call: _e.mock.On("Signup",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockUserServiceClient_Signup_Call) Run(run func(ctx context.Context, in *SignupRequest, opts ...grpc.CallOption)) *MockUserServiceClient_Signup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *SignupRequest
		if args[1] != nil {
			arg1 = args[1].(*SignupRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockUserServiceClient_Signup_Call) Return(empty *emptypb.Empty, err error) *MockUserServiceClient_Signup_Call {
	_c.Call.Return(empty, err)
	return _c
}

func (_c *MockUserServiceClient_Signup_Call) RunAndReturn(run func(ctx context.Context, in *SignupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)) *MockUserServiceClient_Signup_Call {
	_c.Call.Return(run)
	return _c
}
